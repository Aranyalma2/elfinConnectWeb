<%- include('frameTop') -%>

<link rel="stylesheet" href="/custom-css/webview.css" />

<section>
  <div class="row">
    <div class="col">
      <h2 class="mb-4"><%= device?.hostName || 'Device Name' %></h2>
    </div>

    <div class="col text-end mb-4">
      <button id="editModeToggle" class="btn btn-success">
        <i class="bi bi-pencil-square"></i> <%= texts?.EditMode %>
      </button>
      <!--<a href="#" class="btn btn-primary"><%= texts?.test %></a>-->
    </div>
  </div>

  <div class="modal" id="editComponentModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable"">
      <div class=" modal-content">
      <div class="modal-header">
        <h5 class="modal-title"><%= texts?.Edit_Component %></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editComponentForm">
          <a hidden id="formComponentId"></a>

          <!-- Name Input -->
          <div class="mb-3">
            <label for="formComponentName" class="form-label"><%= texts?.Name %></label>
            <input type="text" class="form-control" id="formComponentName" name="name" placeholder="<%= texts?.Enter_Component_Name %>" required>
          </div>

          <!-- Type Dropdown -->
          <div class="mb-3">
            <label for="formComponentType" class="form-label"><%= texts?.Type %></label>
            <select class="form-select" id="formComponentType" name="type" required>
              <option value="button">Button</option>
              <option value="switch">Switch</option>
              <option value="lamp">Lamp</option>
              <option value="number-display">Number Display</option>
              <option value="number-input">Number Input</option>
            </select>
          </div>

          <!-- Modbus Group -->
          <fieldset class="border p-3 rounded">
            <legend class="float-none w-auto px-3"><%= texts?.Modbus %></legend>

            <!-- Function Code -->
            <div class="mb-3">
              <label for="formFunctionCode" class="form-label"><%= texts?.Function_code %></label>
              <select class="form-select" id="formFunctionCode" name="type" required>
                <option value="01">01 Read Coil</option>
                <option value="02">02 Read Input Status</option>
                <option value="03">03 Read Holding Register</option>
                <option value="04">04 Read Input Register</option>
                <option value="05">05 Write Coil</option>
                <option value="06">06 Write Holding Register</option>
                <option value="0105">01/05 Read/Write Coil</option>
                <option value="0306">03/06 Read/Write Holding Register</option>
              </select>
            </div>

            <!-- Device Address -->
            <div class="mb-3">
              <label for="formDeviceAddress" class="form-label"><%= texts?.Device_address %></label>
              <input type="number" class="form-control" id="formDeviceAddress" name="modbusDeviceAddress" min="0" max="255" placeholder="0-255" required>
            </div>

            <!-- Register Address -->
            <div class="mb-3">
              <label for="formRegisterAddress" class="form-label"><%= texts?.Register_address %></label>
              <input type="number" class="form-control" id="formRegisterAddress" name="modbusRegisterAddress" min="0" max="65535" placeholder="0-65535" required>
            </div>
          </fieldset>

          <!-- Extra Fields -->
          <fieldset class="border p-3 rounded">
            <legend class="float-none w-auto px-3"><%= texts?.Additional_paramters %></legend>
            <div class="mb-3 d-none" id="buttonGroup">
              <label for="buttonLabel" class="form-label"><%= texts?.Button_label %></label>
              <input type="text" class="form-control" id="buttonLabel" name="label" placeholder="<%= texts?.Enter_button_label %>">
            </div>
            <div class=" d-none" id="numberDisplayGroup">
              <div class="mb-3">
                <div class="mb-3">
                  <label for="numberDisplayDecimalPoint" class="form-label"><%= texts?.Slide_decimal_point %></label>
                  <input type="number" class="form-control" id="numberDisplayDecimalPoint" name="decimalpoint" min="-10" max="10" placeholder="10^x" value="0">
                </div>
                <input type="checkbox" class="form-check-input" id="numberDisplaySigned" name="isSigned">
                <label class="form-check-label" for="numberDisplaySigned"><%= texts?.Signed %></label>
              </div>
              <div class="mb-3">
                <label for="numberDisplaySuffix" class="form-label"><%= texts?.Suffix %></label>
                <input type="text" class="form-control" id="numberDisplaySuffix" name="suffix" placeholder="<%= texts?.Enter_suffix %>">
              </div>
            </div>
            <div class=" d-none" id="numberInputGroup">
              <div class="mb-3">
                <label for="numberInputDecimalPoint" class="form-label"><%= texts?.Slide_decimal_point %></label>
                <input type="number" class="form-control" id="numberInputDecimalPoint" name="decimalpoint" min="-10" max="10" placeholder="10^x" value="0">
              </div>
              <div class="mb-3">
                <input type="checkbox" class="form-check-input" id="numberInputSigned" name="isSigned">
                <label class="form-check-label" for="numberInputSigned"><%= texts?.Signed %></label>
              </div>
              <div class="mb-3">
                <label for="numberInputMin" class="form-label"><%= texts?.Minimum %></label>
                <input type="text" class="form-control" id="numberInputMin" name="min" min="0" max="65535" placeholder="0" value="0">
              </div>
              <div class="mb-3">
                <label for="numberInputMax" class="form-label"><%= texts?.Maximum %></label>
                <input type="test" class="form-control" id="numberInputMax" name="max" min="0" max="65535" placeholder="65535" value="65535">
              </div>
              <small class="text-muted d-block mt-2">
                Note: Ranges will auto-adjust to the minimum value. If the minimum is less than zero, the range will be signed, 
                and the maximum will be set to a maximum of 32,767.
              </small>
            </div>
          </fieldset>

          <!-- Save Button -->
          <div class="mt-3">
            <button type="submit" class="btn btn-primary" data-bs-dismiss="modal"><%= texts?.Save %></button>
          </div>
        </form>
      </div>
    </div>
  </div>
  </div>

  <div id="cardContainer" class="d-flex flex-row justify-content-start flex-wrap p-1">
    <!-- Dynamic Cards will be rendered here -->
  </div>
</section>

<script>
  const _texts = <%- JSON.stringify(texts) %>;
</script>

<script src="/js/deviceViewRenderer.js"></script>
<script src="/js/deviceViewDragAndDrop.js"></script>
<script src="/js/deviceViewEventListeners.js"></script>
<script src="/js/deviceViewModalFormControll.js"></script>
<script>
  //Initial components array
  let runModeComponents = [];
  let editModeComponents = [];
  let isEditMode = false;
  //Add components to the array
  <% if (typeof viewComponents !== 'undefined' && Array.isArray(viewComponents)) { %>
  <% viewComponents.forEach(component => { %>
  runModeComponents.push({
    id: '<%- component.id %>',
    name: '<%- component.name %>',
    type: '<%- component.type %>',
    order: <%- component.order %>,
    modbus: <%- JSON.stringify(component.modbus || {}) %>,
    extra: <%- JSON.stringify(component.extra || {}) %>,
  });
  <% }); %>
  <% } %>

  //Render the components
  const cardContainer = document.getElementById('cardContainer');
  renderer(cardContainer, createLayout(runModeComponents, isEditMode), isEditMode);

  function toggleEditMode(isEditMode, editModeToggleButton) {
    isEditMode = !isEditMode;

    if(isEditMode){
      window.onbeforeunload = function() {
        return "";
      };
    } else {
      window.onbeforeunload = null;
    }

    // Update button text based on edit mode state
    editModeToggleButton.innerHTML = `
        <i class="bi ${isEditMode ? 'bi-save' : 'bi-pencil-square'}"></i> 
        ${isEditMode ? '<%= texts?.Save || "Save" %>' : '<%= texts?.EditMode || "Edit Mode" %>'}
        `;
    // Re-render the components
    if (isEditMode) {
      editModeComponents = structuredClone(runModeComponents);
      renderer(cardContainer, createLayout(editModeComponents, isEditMode), isEditMode);
    } else {
      console.log(editModeComponents);
      if (JSON.stringify(editModeComponents) === JSON.stringify(runModeComponents)) {
        console.log('No changes detected. Exiting edit mode.');
        renderer(cardContainer, createLayout(runModeComponents, isEditMode), isEditMode);
        return isEditMode;
      }
      runModeComponents = editModeComponents.map(component => ({
        ...component
      }));
      saveLayout(runModeComponents)
      .then(updatedComponents => {
        if (updatedComponents) {
          runModeComponents = updatedComponents;
          console.log('Updated layout saved:', updatedComponents);
        } else {
          console.warn('Failed to save layout. Reverting to original layout.');
        }
        renderer(cardContainer, createLayout(runModeComponents, isEditMode), isEditMode);
      })
      .catch(error => {
        console.error('Error saving layout:', error);
      });
    }

    return isEditMode;
  }

  document.getElementById('editModeToggle').addEventListener('click', function() {
    isEditMode = toggleEditMode(isEditMode, document.getElementById('editModeToggle'));
  });

  // Delete card functionality
  document.getElementById('cardContainer').addEventListener('click', function(event) {
    if (event.target.classList.contains('delete-card-btn')) {
      const card = event.target.closest('.card');
      const selectedComponentId = card.id.replace('card-', '');
      editModeComponents = editModeComponents.filter((component) => component.id !== selectedComponentId);
      renderer(cardContainer, createLayout(editModeComponents, isEditMode), isEditMode);
    }
  });
</script>

<script>

  function modbusFunctionCodeParser(mode, functionCode) {
    if (mode === 'read') {
      switch (functionCode) {
        case '0105':
          return '01';
        case '0306':
          return '03';
        case '05':
          return 'Invalid';
        case '06':
          return 'Invalid';
        default:
          return functionCode;
      }
    } else if (mode === 'write') {
      switch (functionCode) {
        case '0105':
          return '05';
        case '0306':
          return '06';
        case '01':
          return 'Invalid';
        case '03':
          return 'Invalid';
        default:
          return functionCode;
      }
    }
  }

  const deviceMAC = '<%= device.macAddress %>';

  async function sendDataRequest(data) {
      
      if (isEditMode) return;

      const postURL = `${window.location.href}/api`;

      //Add device MAC address to the data object
      data.destinationMAC = deviceMAC;

      try {
        const response = await fetch(postURL, {
          method: 'POST',
          body: JSON.stringify({ data }),
          headers: {
            'Content-Type': 'application/json',
          },
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        return await response.json(); // Parse and return JSON response
      } catch (error) {
        console.error('Error during fetch:', error);
        return null; // Return null on error to handle gracefully
      }
    }

    async function saveLayout(layout = runModeComponents) {
      const postURL = `${window.location.href}`;

      try {
        const response = await fetch(postURL, {
          method: 'POST',
          body: JSON.stringify({ view: layout }),
          headers: {
            'Content-Type': 'application/json',
          },
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        return await response.json(); // Parse and return JSON response
      } catch (error) {
        console.error('Error during fetch:', error);
        return null; // Return null on error to handle gracefully
      }
    }
</script>

<script>

  async function activeRequestRunner(componentObject, value) {
    const sendComponent = {
        id: componentObject.id,
        modbus: {...componentObject.modbus},
        extra: componentObject.extra,
        data: value,
      };

      // Adjust the function code to write mode
      const fcode = modbusFunctionCodeParser('write', componentObject.modbus.functionCode);
      if (fcode === 'Invalid') {
        return;
      }

      sendComponent.modbus.functionCode = fcode;

      const response = await sendDataRequest(sendComponent);
  }


  async function passiveRequestRunner() {
    if (isEditMode) return;

    const passiveViewComponents = document.querySelectorAll('.viewPassive');

    for (const component of passiveViewComponents){
      const componentObject = runModeComponents.find((element) => element.id === component.id);

      const sendComponent = {
        id: componentObject.id,
        modbus: {...componentObject.modbus},
        extra: componentObject.extra,
      };

      // Adjust the function code to read mode
      const fcode = modbusFunctionCodeParser('read', componentObject.modbus.functionCode);
      if (fcode === 'Invalid') {
        continue;
      }

      sendComponent.modbus.functionCode = fcode;

      try {
        const response = await sendDataRequest(sendComponent); // Use await here
        if (response) {
          if (response.error) {
            console.error(`Error processing element ${component.id}:`, response.error);
            updateCardContent(component.id, null, response.error);
          } else {
            updateCardContent(component.id, response.data, null);
          }
        }
      } catch (error) {
        console.error(`Error processing element ${component.id}:`, error);
      }
    }
  }

  // Call passiveRequestRunner every 5 seconds
  passiveRequestRunner(); // Initial call
  setInterval(() => {
    passiveRequestRunner(); // Schedule the function
  }, 5000);
</script>



<%- include('frameBottom') -%>